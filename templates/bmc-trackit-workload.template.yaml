# Â© Copyright 2020 BMC Software, Inc. or one of its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  "This template deploys a BMC Track-It! BYOL/90 Day Trial stack into an existing VPC.
  **WARNING** This template creates EC2 instances and related resources. You
  will be billed for the AWS resources used if you create a stack from this
  template. License: Apache 2.0 (Please do not remove) Sept,29,2020. BMC Track-It! 
  is licensed separately, please review the terms and conditions here 
  (https://www.bmc.com/about/legal/) for further details.
  (qs-1r6abo918)"
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PrivateSubnet1AID
          - PrivateSubnet2AID
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainMemberSGID
          - DomainAdminPassword
          - DomainAdminPasswordConfirm
      - Label:
          default: Track-It! Server Configuration
        Parameters:
          - TrackItInstanceType
          - KeyPairName
          - TrackItEndUserWebAccessCIDR
          - OperatorEmail
      - Label:
          default: "[Optional] Track-It! site domain configuration"
        Parameters:
          - Route53HostedZoneId
          - TrackItSiteDomain
          - TrackItSSLCertificateARN
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      DirectoryServiceID:
        default: Directory Service ID
      DomainAdminPassword:
        default: Domain Admin account password
      DomainAdminPasswordConfirm:
        default: Re-enter the domain Admin account password
      DomainDNSName:
        default: Domain DNS name
      DomainMemberSGID:
        default: Domain member Security Group ID
      DomainNetBIOSName:
        default: Domain NetBIOS name
      KeyPairName:
        default: Key pair name
      OperatorEmail:
        default: Operator email address
      PrivateSubnet1AID:
        default: Private Subnet 1 ID
      PrivateSubnet2AID:
        default: Private Subnet 2 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      Route53HostedZoneId:
        default: Route 53 hosted zone ID
      TrackItEndUserWebAccessCIDR:
        default: Track-It End-user Web Access Permitted IP Range
      TrackItInstanceType:
        default: Track-It! Instance Type
      TrackItSiteDomain:
        default: Track-It! site domain
      TrackItSSLCertificateARN:
        default: Track-It! SSL certificate ARN
      VPCID:
        default: VPC ID
Parameters:
  DirectoryServiceID:
    Type: String
    Description: >-
      The ID of the AWS Managed Microsoft AD directory in which you want to
      deploy.
    Default: d-9067651f91
  DomainAdminPassword:
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: >-
      The password for the domain Admin account. Must be at least 8 characters
      containing letters, numbers, and symbols.
    MaxLength: '32'
    MinLength: '8'
    NoEcho: true
    Type: String
    Default: Pa$$W0rd
  DomainAdminPasswordConfirm:
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: >-
      Confirm the password for the domain Admin account. Must be at least 8
      characters containing letters, numbers, and symbols.
    MaxLength: '32'
    MinLength: '8'
    NoEcho: true
    Type: String
    Default: Pa$$W0rd
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.internal
    Description: >-
      The fully qualified domain name (FQDN), e.g., example.com. Must be 2-255
      characters.
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainMemberSGID:
    Description: >-
      The ID of the Domain Member Security Group (e.g., sg-7f16e910).
    Type: 'AWS::EC2::SecurityGroup::Id'
    Default: sg-01b9cfc798c3d87ee
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: example
    Description: >-
      The NetBIOS name of the domain (up to 15 characters) for users of
      earlier versions of Microsoft Windows, e.g., example.
    MaxLength: '15'
    Type: String
  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair. All instances will launch with this key pair.
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Must be one of the existing EC2 keypair
    Default: id_rsa
  OperatorEmail:
    AllowedPattern: >-
      (?i)^None$|([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Description: >-
      (optional) Email address that notifications are sent to (e.g.,
      database, VM failures, etc.).
    Type: String
    Default: None
  PrivateSubnet1AID:
    Description: >-
      ID of private subnet 1A in Availability Zone 1 (e.g.,
      subnet-a0246dcd). default: subnet-026fa230f711c0b56
    Type: 'AWS::EC2::Subnet::Id'    
  PrivateSubnet2AID:
    Description: >-
      ID of private subnet 2A in Availability Zone 2 (e.g.,
      subnet-01a43dc1ca1fa7f9b).
    Type: 'AWS::EC2::Subnet::Id'
  PublicSubnet1ID:
    Description: >-
      ID of public subnet 1 in Availability Zone 1 for the Elastic Load
      Balancing (ELB) load balancer (e.g., subnet-9bc642ac).
    Type: "AWS::EC2::Subnet::Id"
    Default: subnet-0300f6d9c6cd261da
  PublicSubnet2ID:
    Description: >-
      ID of public subnet 2 in Availability Zone 1 for the Elastic Load
      Balancing (ELB) load balancer (e.g., subnet-9bc642ac).
    Type: "AWS::EC2::Subnet::Id"
    Default: subnet-01eba4b3e8976a032
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    # Default: aws-quickstart
    Default: sk-quickstart
    Description: >-
      S3 bucket that you created for your copy of Quick Start assets.
      Use this if you decide to customize the Quick Start. This bucket name can include numbers, lowercase letters,
      uppercase letters, and hyphens but should not start or end with a hyphen.
    Type: String
  QSS3BucketRegion:
    Default: "us-east-1"
    Description: "AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*/$"
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-bmc-track-it-ad/
    Description: >-
      S3 key name prefix that is used to simulate a directory for your copy of Quick Start assets.
      Use this if you decide to customize the Quick Start. This prefix can include numbers, lowercase letters,
      uppercase letters, hyphens, and forward slashes.
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html.
    Type: String
  Route53HostedZoneId:
    Description: >-
      [Optional] Route53 Hosted Zone ID where DNS record for Track-It! Site Domain will be added.
    Type: String
    Default: Z05816983102EY5OXZUE5
  TrackItEndUserWebAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Description: >-
      CIDR IP range that is permitted to access the Track-It web portal.
      Note: a value of 0.0.0.0/0 will allow access from ANY ip address
    Type: String
    Default: 0.0.0.0/0
  TrackItInstanceType:
    Description: Track-It! all-in-one server instance type
    Type: String
    Default: m5.large
    AllowedValues:
      # - t2.small
      # - t2.medium
      # - t2.large
      # - t2.xlarge
      - m5.large
      - t3a.large
    ConstraintDescription: Please choose from one of the given options
  TrackItSiteDomain:
    Type: String
    Description: >-
      [Optional] Domain name of the Track-It! site. e.g. example.com. Valid FQDN required when using SSL.
    AllowedPattern: (?!-)[a-zA-Z0-9-.]*(?<!-)
    ConstraintDescription: Must be a valid fully-qualified domain name.
    Default: trackit.skellish.people.aws.
  TrackItSSLCertificateARN:
    Type: String
    Description: >-
      [Optional] ARN of the SSL certificate to be used for the Application Load Balancer.
    Default: arn:aws:acm:us-east-1:094559051528:certificate/bf2962bd-8da9-4e07-8e3e-830b21c59443
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: "AWS::EC2::VPC::Id"
    Default: vpc-0801d7e8ce5ca9fe4
Mappings:
  AWSAMIRegionMap:
    ap-south-1:
      x64: ami-0f07f1229c688d429
    us-east-1:
      x64: ami-0e2ae6d2b8eb581dd
    us-east-2:
      x64: ami-0c25a9042f9e97d57
    us-west-1:
      x64: ami-01fcce1b1797b595c
    us-west-2:
      x64: ami-02052da34a2cfa51c
Conditions:
  UsingDefaultBucket: !Equals 
    - !Ref QSS3BucketName
    - 'aws-quickstart'
  HaveOperatorEmail: !Not
    - !Equals
      - !Ref OperatorEmail
      - None
  UseTrackItSSL:
    Fn::Not:
      - Fn::Equals:
          - Ref: TrackItSSLCertificateARN
          - ""
  TrackItSiteDomainRoute53Condition:
    Fn::And:
      - Fn::Not:
          - Fn::Equals:
              - Ref: TrackItSiteDomain
              - ""
      - Fn::Not:
          - Fn::Equals:
              - Ref: Route53HostedZoneId
              - ""
  IsOk: !Equals [ 1,1 ]
Rules:
  DomainAdminPasswordsMatchRule:
    Assertions:
      - Assert: !Equals
          - !Ref DomainAdminPassword
          - !Ref DomainAdminPasswordConfirm
        AssertDescription: Domain Admin account password values do not match.
  KeyPairsNotEmpty:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::EachMemberEquals:
                - Fn::RefAll: AWS::EC2::KeyPair::KeyName
                - ""
        AssertDescription: Key pair parameter must not be empty
  SubnetsInVPC:
    Assertions:
      - Assert:
          Fn::EachMemberIn:
            - Fn::ValueOfAll:
                - AWS::EC2::Subnet::Id
                - VpcId
            - Fn::RefAll: AWS::EC2::VPC::Id
        AssertDescription: All subnets must in the VPC
  SslAndRoute53Rule:
    RuleCondition: !Or
      - Fn::Not:
          - Fn::Equals:
              - Ref: TrackItSSLCertificateARN
              - ""
      - Fn::Not:
          - Fn::Equals:
              - Ref: Route53HostedZoneId
              - ""
    Assertions:
      - AssertDescription: >-
          Parameter TrackItSiteDomain cannot be empty and must provide
          FQDN e.g. example.com, when TrackItSSLCertificateARN or Route53HostedZoneId values
          are provided.
        Assert: !Not
          - Fn::Equals:
              - Ref: TrackItSiteDomain
              - ""
  T3InstanceSupportedRegionRule:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::And:
                - Fn::Contains:
                    - - ap-northeast-2
                      - ap-northeast-3
                      - ap-south-1
                      - eu-west-3
                    - Ref: AWS::Region
                - Fn::Contains:
                    - - t3.nano
                      - t3.micro
                      - t3.small
                      - t3.medium
                      - t3.large
                      - t3.xlarge
                      - t3.2xlarge
                    - Ref: TrackItInstanceType
        AssertDescription:
          T3 instances are not supported in Seoul (ap-northeast-2),
          Osaka-Local (ap-northeast-3), Mumbai (ap-south-1) and Paris (eu-west-3) regions.
          Please launch the stack with another instance type.
Resources:
  EMailNotificationTopic:
    Type: "AWS::SNS::Topic"
    Condition: HaveOperatorEmail
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEmail
          Protocol: email
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TrackIt-SNS"
  TIInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      Policies:
        - PolicyName: aws-quick-start-s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Effect: Allow
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${S3Bucket}
                    - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                    - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TrackIt-Instance-Role"
  TIInstanceRoleProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref TIInstanceRole
  TIALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Track-It App Load Balancer (e.g., External user Http(80)/Https(443) access)
      SecurityGroupIngress:
        - Description: Track-It! ALB (External User) Ingress Rule
          CidrIp: !Ref TrackItEndUserWebAccessCIDR
          IpProtocol: tcp
          FromPort: !If
            - UseTrackItSSL
            - 443
            - 80
          ToPort: !If
            - UseTrackItSSL
            - 443
            - 80
        - Description: RDP Internet Ingress for debugging
          CidrIp: !Ref TrackItEndUserWebAccessCIDR
          IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
        - Description: RDP VPC Ingress for debugging
          CidrIp: 10.0.0.0/16
          IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
      VpcId: !Ref VPCID
  TIAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group used for Track-It! server access (HTTP(80) from ALB)
      SecurityGroupIngress:
        - Description: Track-It! HTTP(80) Web from ALB Ingress Rule
          SourceSecurityGroupId: !Ref TIALBSecurityGroup
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPCID
  TrackItAppPlusDB:
    Condition: IsOk
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref TIInstanceRole
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 010-initPowerShell
            - 020-renameAndJoinDomain
            - 030_setupCfnHup
            - 040_cfnHup_service
            - 800_config-amazon-cloudwatch-agent
            - 810_restart_amazon-cloudwatch-agent
            - 900-finalize
          UpdateEnvironment:
            - 800_config-amazon-cloudwatch-agent
            - 810_restart_amazon-cloudwatch-agent
        010-initPowerShell:
          files:
            c:\cfn\scripts\New-ADUser.ps1:
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/New-ADUser.ps1
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            C:\cfn\scripts\Unzip-Archive.ps1:
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            C:\cfn\modules\AWSQuickStart.zip:
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/modules/AWSQuickStart.zip
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.TrackItAppPlusDB.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -c config -s ${AWS::StackId} --resource TrackItAppPlusDB --region ${AWS::Region}
            c:\cfn\scripts\AddTo-SystemPath.ps1:
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/AddTo-SystemPath.ps1
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            c:\cfn\scripts\Schedule-AD-PowershellTask.ps1:
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Schedule-AD-PowershellTask.ps1
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            C:\cfn\scripts\Join-Domain.ps1:
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Join-Domain.ps1
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            C:\cfn\scripts\Rename-Computer.ps1:
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Rename-Computer.ps1
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
          commands:
            a-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned"
                -Force
              waitAfterCompletion: '0'
            b-unpack-quickstart-module:
              command: powershell.exe -File C:\cfn\scripts\Unzip-Archive.ps1 -Source
                C:\cfn\modules\AWSQuickStart.zip -Destination C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
              waitAfterCompletion: '0'
            c-init-quickstart-module:
              command: !Sub 'powershell.exe -Command New-AWSQuickStartResourceSignal
                -Stack ${AWS::StackName} -Resource TrackItAppPlusDB -Region ${AWS::Region}'
              waitAfterCompletion: '0'
        020-renameAndJoinDomain:
          commands:
            a-update-trackit-db-odbc-entries:
              command: !Sub
                - 'rem powershell.exe
                    -Command
                      "&{
                          try {
                            $ErrorActionPreference = ''Stop'';
                            Set-OdbcDsn -Name ''BcmDb'' -DsnType ''System'' -Platform ''64-bit'' -SetPropertyValue ''Server=${TrackItInstanceName}'';
                            Set-OdbcDsn -Name ''SelfService'' -DsnType ''System'' -Platform ''32-bit'' -SetPropertyValue ''Server=${TrackItInstanceName}'';
                            Set-OdbcDsn -Name ''Track-It'' -DsnType ''System'' -Platform ''32-bit'' -SetPropertyValue ''Server=${TrackItInstanceName}'';
                            Set-OdbcDsn -Name ''TrackItBR'' -DsnType ''System'' -Platform ''32-bit'' -SetPropertyValue ''Server=${TrackItInstanceName}'';
                          } catch {
                            $_ | Write-AWSQuickStartException;
                          }
                        }"'
                - TrackItInstanceName: 'TrackIt01'
              waitAfterCompletion: '0'
            b-rename-computer:
              command: !Sub
                powershell.exe
                  -File C:\cfn\scripts\Rename-Computer.ps1
                    -NewName TrackIt01
                    -Restart
              waitAfterCompletion: forever
            c-join-domain-and-restart:
              command: !Sub 'powershell.exe -File C:\cfn\scripts\Join-Domain.ps1 -DomainName
                ${DomainDNSName} -UserName ${DomainNetBIOSName}\Admin -Password ${DomainAdminPassword}'
              waitAfterCompletion: forever
            d-add-domain-users-rdp-users-group:
              command: !Sub 'powershell -Command "&{ try { $ErrorActionPreference
                = ''Stop''; $GroupObj = [ADSI]''WinNT://localhost/Remote Desktop Users'';
                $GroupObj.Add(''WinNT://${DomainNetBIOSName}/Domain Users''); Install-WindowsFeature
                -Name GPMC,RSAT-AD-PowerShell,RSAT-AD-AdminCenter,RSAT-ADDS-Tools,RSAT-DNS-Server;
                } catch { $_ | Write-AWSQuickStartException; } }"'
              waitAfterCompletion: '0'
        
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        030_setupCfnHup:
          files:
            "c:\\cfn\\cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            "c:\\cfn\\hooks.d\\amazon-cloudwatch-agent-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.TrackItAppPlusDB.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=cfn-init.exe -v --stack ${AWS::StackId} --resource TrackItAppPlusDB --region ${AWS::Region} --configsets UpdateEnvironment
        040_cfnHup_service:
          services:
            windows:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "c:\\cfn\\cfn-hup.conf"
                  - "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        800_config-amazon-cloudwatch-agent:
          files:
            ? "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json"
            : content: |
                {
                  "agent": {
                      "metrics_collection_interval": 60,
                      "logfile": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log"
                  },
                  "metrics": {
                      "namespace": "BMC-Track-It",
                      "append_dimensions": {
                          "ImageId": "${!aws:ImageId}",
                          "InstanceId": "${!aws:InstanceId}",
                          "InstanceType": "${!aws:InstanceType}"
                      },
                      "metrics_collected": {
                          "LogicalDisk": {
                              "measurement": [
                                  {
                                      "name": "% Free Space",
                                      "rename": "FreeStorageSpaceInPercent",
                                      "unit": "Percent"
                                  },
                                  {
                                      "name": "Free Megabytes",
                                      "rename": "FreeStorageSpaceInMB",
                                      "unit": "Megabytes"
                                  }
                              ],
                              "resources": [
                                  "*",
                                  "_Total"
                              ]
                          },
                          "Processor": {
                              "measurement": [
                                  {
                                      "name": "% Processor Time",
                                      "rename": "CPUUtilization",
                                      "unit": "Percent"
                                  }
                              ],
                              "resources": [
                                  "_Total"
                              ]
                          },
                          "Memory": {
                              "metrics_collection_interval": 60,
                              "measurement": [
                                  {
                                      "name": "Available MBytes",
                                      "rename": "FreeableMemory",
                                      "unit": "Bytes"
                                  },
                                  {
                                      "name": "Pages/Sec",
                                      "rename": "PagesRetreivedPerSecFromDisk",
                                      "unit": "Count/Second"
                                  }
                              ]
                          },
                          "SQLServer:SQL Statistics": {
                              "measurement": [
                                  {
                                      "name": "SQL Compilations/sec",
                                      "rename": "SQLCompilationsPerSec",
                                      "unit": "Count/Second"
                                  },
                                  {
                                      "name": "SQL Re-Compilations/sec",
                                      "rename": "SQLReCompilationsPerSec",
                                      "unit": "Count/Second"
                                  },
                                  {
                                      "name": "Batch Requests/sec",
                                      "rename": "BatchRequestsPerSec",
                                      "unit": "Count/Second"
                                  }
                              ]
                          },
                          "SQLServer:Access Methods": {
                              "measurement": [
                                  "Page Splits/sec",
                                  "Forwarded Records/sec",
                                  "Full scans/sec"
                              ]
                          },
                          "SQLServer:General Statistics": {
                              "measurement": [
                                  "Processes blocked",
                                  {
                                      "name": "User Connections",
                                      "rename": "DatabaseConnections",
                                      "unit": "Count"
                                  }
                              ]
                          },
                          "SQLServer:Buffer Manager": {
                              "measurement": [
                                  "Page life expectancy",
                                  "Page writes/sec",
                                  "Page reads/sec",
                                  "Buffer cache hit ratio",
                                  "Checkpoint pages/sec"
                              ]
                          },
                          "SQLServer:Memory Manager": {
                              "measurement": [
                                  "Memory Grants Pending"
                              ]
                          }
                      }
                  },
                  "logs": {
                      "logs_collected": {
                          "files": {
                              "collect_list": [
                                  {
                                      "file_path": "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/amazon-cloudwatch-agent.log"
                                  },
                                  {
                                      "file_path": "C:\\Program Files (x86)\\BMC\\Track-It!\\Logs\\NAMMetadata_*.log",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/Track-It/Logs/NAMMetadata",
                                      "auto_removal": true
                                  },
                                  {
                                      "file_path": "C:\\Program Files (x86)\\BMC\\Track-It!\\Logs\\ServiceDesk_*.log",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/Track-It/Logs/ServiceDesk",
                                      "auto_removal": true
                                  },
                                  {
                                      "file_path": "C:\\Program Files (x86)\\BMC\\Track-It!\\Database\\Logs\\DBInstall_*.log",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/Track-It/Database/DBInstall",
                                      "auto_removal": true
                                  },
                                  {
                                      "file_path": "C:\\Windows\\System32\\LogFiles\\HTTPERR\\**.log",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/HTTPERR",
                                      "timestamp_format": "%H:%M:%S %y %b %-d",
                                      "auto_removal": true
                                  },
                                  {
                                      "file_path": "C:\\inetpub\\logs\\LogFiles\\W3SVC1\\u_ex.log",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/IIS",
                                      "auto_removal": true
                                  },
                                  {
                                      "file_path": "c:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Log\\ERRORLOG",
                                      "log_group_name": "BMC-Track-It",
                                      "timezone": "UTC",
                                      "log_stream_name": "{instance_id}/sql_error_log_stream/sql-error.log",
                                      "timestamp_format": "%H:%M:%S %y %b %-d",
                                      "auto_removal": true
                                  }
                              ]
                          },
                          "windows_events": {
                              "collect_list": [
                                  {
                                      "event_format": "xml",
                                      "event_levels": [
                                          "WARNING",
                                          "ERROR",
                                          "CRITICAL"
                                      ],
                                      "event_name": "System",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/Windows/System"
                                  },
                                  {
                                      "event_format": "xml",
                                      "event_levels": [
                                          "WARNING",
                                          "ERROR",
                                          "CRITICAL"
                                      ],
                                      "event_name": "Security",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/Windows/Security"
                                  },
                                  {
                                      "event_format": "xml",
                                      "event_levels": [
                                          "WARNING",
                                          "ERROR",
                                          "CRITICAL"
                                      ],
                                      "event_name": "Application",
                                      "log_group_name": "BMC-Track-It",
                                      "log_stream_name": "{instance_id}/Windows/Application"
                                  }
                              ]
                          }
                      }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        810_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
              "waitAfterCompletion": "0"
            02_start_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"
              "waitAfterCompletion": "0"
        900-finalize:
          commands:
            a-finalize-init:
              command: powershell.exe -Command Write-AWSQuickStartStatus
              waitAfterCompletion: '0'
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - x64
      InstanceType: !Ref TrackItInstanceType
      IamInstanceProfile: !Ref TIInstanceRoleProfile
      SecurityGroupIds:
        - !Ref DomainMemberSGID
        - !Ref TIAppSecurityGroup
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnet1AID
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 200
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TrackIt-Instance"
      UserData:
        Fn::Base64: !Sub |
          <script>
          mkdir C:\Downloads\Amazon\AmazonCloudWatchAgent
          powershell -Command "(New-Object Net.WebClient).DownloadFile('https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi','C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi')"
          C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi
          cfn-init.exe -v --stack ${AWS::StackId} --resource TrackItAppPlusDB --region ${AWS::Region} --configsets default
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource TrackItAppPlusDB --region ${AWS::Region}
          </script>
  TrackItAppPlusDBRecoveryAlarm:
    Condition: IsOk
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: !Sub |
        "${AWS::StackName} Stack instance auto-recovery alarm/trigger."
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
        - !If
          - HaveOperatorEmail
          - !Ref EMailNotificationTopic
          - !Ref "AWS::NoValue"
      Dimensions:
        - Name: InstanceId
          Value: !Ref TrackItAppPlusDB
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Ref: PublicSubnet1ID
        - Ref: PublicSubnet2ID
      SecurityGroups:
        - Ref: TIALBSecurityGroup
  ALBListener:
    Condition: IsOk
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port:
        Fn::If:
          - UseTrackItSSL
          - 443
          - 80
      Protocol:
        Fn::If:
          - UseTrackItSSL
          - HTTPS
          - HTTP
      Certificates:
        - Fn::If:
            - UseTrackItSSL
            - CertificateArn:
                Ref: TrackItSSLCertificateARN
            - Ref: AWS::NoValue
  ALBTargetGroup:
    Condition: IsOk
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPath: /TrackIt/Account/LogIn?ReturnUrl=%2fTrackIt
      Matcher:
        HttpCode: "200,302"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VPCID
      TargetType: instance
      Targets:
        - Id: !Ref TrackItAppPlusDB
          Port: 80
  TrackItSiteDomainRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: TrackItSiteDomainRoute53Condition
    Properties:
      Name:
        Ref: TrackItSiteDomain
      Type: A
      HostedZoneId:
        Ref: Route53HostedZoneId
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - ApplicationLoadBalancer
            - DNSName
        EvaluateTargetHealth: true
        HostedZoneId:
          Fn::GetAtt:
            - ApplicationLoadBalancer
            - CanonicalHostedZoneID
Outputs:
  TrackItDNSName:
    Description: Track-It! DNS Name
    Value:
      Fn::GetAtt:
        - ApplicationLoadBalancer
        - DNSName
  TrackItAppURL:
    Description: Track-It! Application URL
    Value:
      Fn::Sub:
        - "${AppScheme}://${AppDomain}/TrackIt"
        - AppScheme:
            Fn::If:
              - UseTrackItSSL
              - https
              - http
          AppDomain:
            Fn::If:
              - TrackItSiteDomainRoute53Condition
              - Ref: TrackItSiteDomain
              - Fn::GetAtt:
                  - ApplicationLoadBalancer
                  - DNSName